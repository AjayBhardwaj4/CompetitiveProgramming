/*

https://www.hackerearth.com/practice/algorithms/searching/linear-search/practice-problems/algorithm/maximum-sum-4-f8d12458/


Problem
You are given an array of integers , you need to find the maximum sum that can be obtained by picking some non-empty subset of the array. If there are many such non-empty subsets, choose the one with the maximum number of elements. Print the maximum sum and the number of elements in the chosen subset.

Input:

The first line contains an integer , denoting the number of elements of the array. Next line contains  space-separated integers, denoting the elements of the array.

Output:

Print  space-separated integers, the maximum sum that can be obtained by choosing some subset and the maximum number of elements among all such subsets which have the same maximum sum.

Constraints:

Sample Input
5
1 2 -4 -2 3
Sample Output
6 3

*/





#include <iostream>
#include<climits>
using namespace std;
 
int main() {
	int n;
	cin >> n;									
	
	int a[n],flag=0;
	for(int i=0;i<n;i++)
	{
		cin>>a[i];
		if(a[i]>=0)
		{
			flag=1;
		}
	}		
	
	long long sum=0,ne=0;
	if(!flag)
	{ 
		sum=INT_MIN;
		for(int i=0;i<n;i++)
	  {
		  if(a[i]>sum)
		  {
			  sum=a[i];
		  }
	  }
		ne=1;
		cout<<sum<<" "<<ne;
		
	}
 
	else
  {
    for(int i=0;i<n;i++)
	  {
		  if(a[i]>=0)
		  {
			  sum+=a[i];
			  ne++;
		  }
	  }
 
	  cout<<sum<<" "<<ne;
	
	}
	return 0;
	
}
